PARSER_BEGIN(Parser)

import java.io.*;

public class Parser {

  public static void main(String args[]){

    try {

      if (args.length != 1) {
        System.out.println("sytnax: Parser <FILE>");
      }
      else {
        // open file as input stream
        InputStream ss = new FileInputStream(args[0]);
        // create parser with file as input stream
        Parser parser = new Parser(ss);
        // get AST root
        SimpleNode root = parser.start();
        // display AST
        root.dump("");
      }
    }
    catch (Exception e) {
      System.out.println("Error: " + e);
    }
  }
}

PARSER_END(Parser)


SKIP :
{
  " "| "\t" | "\r" | "\n"
}

TOKEN :
{
    < AT : "@" >
  | < NUM : (["0"-"9"])+ >
  | < UND : "_" >
  | < LETTER : ["a"-"z", "A"-"Z"] >
  | < NULL : "null" >
  | < IF : "if" >
  | < TYPE : <INT> | <LONG> >
  | < #INT : "int" >
  | < #LONG : "long" >
  | < ID : (<UND> | <LETTER>) (<UND> | <LETTER> | <NUM>)* >
  | < PAT : <AT> <ID> >
  | < SCOL : ";" >
  | < OPAR : "(" >
  | < CPAR : ")" >
  | < OBRA : "{" >
  | < CBRA : "}" >
  | < LT : "<" >
  | < GT : ">" >
  | < EQ : "=" >
  | < NOT : "!" >
  | < COMP : <LT> | <GT> | <EQ><EQ> | <NOT><EQ> | <LT><EQ> | <GT><EQ> >
}

/**
* CFG
*
* start -> stmt* EOF
* stmt -> assign | cond | decl
* assign -> pat EQ (val | pat) SCOL
* pat -> PAT
* val -> ID | NUM | NULL
* cond -> IF OPAR comp CPAR OBRA stmt* CBRA
* comp -> pat COMP (val | pat)
* decl -> TYPE pat SCOL
*/

// start -> stmt* EOF
SimpleNode start() : {}
{
  {jjtThis.value = "start";}
  (stmt())* <EOF> {return jjtThis;}
}

// stmt -> assign | cond
void stmt() #void : {}
{
  assign() | cond() | decl()
}

// assign -> pat EQ (val | pat) SCOL
void assign() : {Token t;}
{
  pat()
  t = <EQ> {jjtThis.value = t.image;}
  (val() | pat())
  <SCOL>
}

// pat -> PAT
void pat() : {Token t;}
{
  t = <PAT> {jjtThis.value = t.image;}
}

// val -> ID | NUM | NULL
void val() : {Token t;}
{
  (t = <ID> | t = <NUM> | t = <NULL>)
  {
    jjtThis.value = t.image;
  }
}

// cond -> IF OPAR comp CPAR OBRA stmt* CBRA
void cond() : {Token t;}
{
  t = <IF> {jjtThis.value = t.image;} <OPAR> comp() <CPAR>
  <OBRA>
    (stmt())*
  <CBRA>
}

// comp -> pat COMP (val | pat)
void comp() : {Token t;}
{
  pat()
  t = <COMP> {jjtThis.value = t.image;}
  (val() | pat())
}

// decl -> TYPE pat SCOL
void decl() : {Token t;}
{
  t = <TYPE> {jjtThis.value = t.image;}
  pat()
  <SCOL>
}
