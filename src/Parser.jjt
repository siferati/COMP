PARSER_BEGIN(Parser)

import java.io.*;

public class Parser {

  public static void main(String args[]){

    try {

      if (args.length != 1) {
        System.out.println("sytnax: Parser <FILE>");
      }
      else {
        // open file as input stream
        InputStream ss = new FileInputStream(args[0]);
        // create parser with file as input stream
        Parser parser = new Parser(ss);
        // get AST root
        SimpleNode root = parser.start();
        // display AST
        root.dump("");
      }
    }
    catch (Exception e) {
      System.out.println("Error: " + e);
    }
  }
}

PARSER_END(Parser)


SKIP :
{
  " "| "\t" | "\r" | "\n"
}

TOKEN :
{
    < AT : "@" >
  | < NUM : ["0"-"9"] >
  | < UND : "_" >
  | < LETTER : ["a"-"z", "A"-"Z"] >
  | < ID : (<UND> | <LETTER>) (<UND> | <LETTER> | <NUM>)* >
  | < PAT : <AT> <ID> >
  | < EQ : "=" >
  | < SCOL : ";" >
}


/**
* Grammar @ola = 3;
*
* start -> equals EOF
* equals -> pat EQ val SCOL
* pat -> PAT
* val -> ID | NUM
*/

SimpleNode start() : {}
{
  equals() <EOF> {return jjtThis;}
}

void equals() : {}
{
  pat() <EQ> val() <SCOL>
}

void pat() : {}
{
  <PAT>
}

void val() : {}
{
  <ID> | <NUM>
}
